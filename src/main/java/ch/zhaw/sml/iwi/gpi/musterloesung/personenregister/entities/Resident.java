/**
 * This file was generated by the Jeddict
 */
package ch.zhaw.sml.iwi.gpi.musterloesung.personenregister.entities;

import java.io.Serializable;
import java.sql.Date;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * @author scep
 */
@Entity
@Table(name = "RESIDENT")
public class Resident implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long personId;

    @Column(nullable = false)
    @Basic
    @NotNull
    @Size(min = 1, max = 100)
    private String firstName;

    @Column(nullable = false)
    @Basic
    @NotNull
    @Size(min = 1, max = 100)
    private String officialName;

    /**
     * 1 (mÃ¤nnlich), 2 (weiblich), 3 (unbestimmt)
     */
    @Column(nullable = false)
    @Basic
    @NotNull
    @Min(value = 1)
    @Max(value = 3)
    private int sex;

    @Column(nullable = false)
    @Basic
    @NotNull
    private Date dateOfBirth;

    @Column(nullable = false)
    @Basic
    @NotNull
    private boolean moveAllowed;

    @ManyToOne(targetEntity = ResidentRelation.class)
    @JoinColumn(name = "RESIDENT_ID")
    private ResidentRelation residentRelation;
    
    // Sich selbst aus der relatives Liste entfernen, da man nur alle mitzuziehende Personen und nicht
    // zusätzlich sich selbst in dieser Liste haben möchte.
    public List<Resident> getRelativesOnly() {
        
        List<Resident> relatives = null;
        
        if (this.getResidentRelation() != null) {
            //Alle der ResidentRelation gehörenden Residents werden der lRelatives List vom Typ Resident zugewiesen.
            relatives = this.getResidentRelation().getResidents();

            //Es wird überprüft ob die Liste diese(this) Instanz der Entität beinhaltet. Wenn ja, wird diese(this) Instanz der Entität aus der Liste entfernt. 
            if(relatives.contains(this)) {
                relatives.remove(this);
            }
        }
        
        //lRelatives wird zurückgegeben
        return relatives;
    }

    public Long getPersonId() {
        return this.personId;
    }

    public void setPersonId(Long personId) {
        this.personId = personId;
    }

    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getOfficialName() {
        return this.officialName;
    }

    public void setOfficialName(String officialName) {
        this.officialName = officialName;
    }

    public int getSex() {
        return this.sex;
    }

    public void setSex(int sex) {
        this.sex = sex;
    }

    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    public boolean isMoveAllowed() {
        return this.moveAllowed;
    }

    public void setMoveAllowed(boolean moveAllowed) {
        this.moveAllowed = moveAllowed;
    }

    public ResidentRelation getResidentRelation() {
        return this.residentRelation;
    }

    public void setResidentRelation(ResidentRelation residentRelation) {
        this.residentRelation = residentRelation;
    }

}