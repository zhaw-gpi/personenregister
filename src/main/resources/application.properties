# Datenquelle wird auf filebasierte H2-Datenbank konfiguriert, die sich im 
# Root-Verzeichnis des Maven-Projekts befindet und ohne Tracing in ein File
# sowie Tracing in System.out auf Level Error (1) sowie mit Benutzername sa und
# leerem Passwort
spring.datasource.url=jdbc:h2:./personenregister;TRACE_LEVEL_FILE=0;TRACE_LEVEL_SYSTEM_OUT=1
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driverClassName=org.h2.Driver

# Damit die von JPA (Hibernate) verwalteten Tabellen nicht bei jedem Neustart (Run) gel\u00f6scht
# werden, muss die Strategie von  Hibernate auf Update statt dem Default (create-drop) gesetzt werden
spring.jpa.hibernate.ddl-auto=update

# Tomcat-Server-Port
server.port = 8083

# Logging-Konfiguration f\u00fcr alle Services so, dass ausreichend Infos f\u00fcrs 
# Entwickeln vorhanden
logging.level.org.camunda.bpm.example=INFO
logging.level.org.camunda.bpm=INFO
logging.level.org.springframework=INFO
logging.level.org.apache=INFO

# Camunda History-Konfiguration auf None, das heisst, keine Process Engine-Aktivit\u00e4ten
# werden historisiert (ansonsten auf full setzen, dann sollte Datenbank aber auch nicht committed werden)
camunda.bpm.history-level=none

# Camunda Admin-User, falls er noch nicht existiert. E-Mail-Adresse mit eigener ersetzen, falls man Mails erhalten m\u00f6chte
camunda.bpm.admin-user.id=a
camunda.bpm.admin-user.password=a
camunda.bpm.admin-user.firstName=Ich
camunda.bpm.admin-user.lastName=der Super-Admin
camunda.bpm.admin-user.email=a@b.ch

# Camunda Tasklist-Konfiguration, so dass initial ein Alle-Filter erstellt wird
camunda.bpm.filter.create=Alle